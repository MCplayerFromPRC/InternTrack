schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

"""Large Language Model Checkpoint"""
type Checkpoint {
  config: String!
  id: String!
  isDelivery: Boolean!
  key: String!
  md5: String!
  revision: String!
  saveTime: DateTime!
  step: Int!
}

enum CkptEventType {
  NewCkpt
}

input CkptInput {
  config: String!
  isDelivery: Boolean!
  md5: String!
  saveTime: DateTime!
  step: Int!
}

"""The step between two saved checkpoints"""
type CkptStep {
  duration: Duration!
  from: String!
  id: String!
  key: String!
  revision: String!
  to: String!
  tokens: PositiveInt!
}

input CkptStepInput {
  duration: Duration!
  from: String!
  to: String!
  tokens: Int!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""

    A string representing a duration conforming to the ISO8601 standard,
    such as: P1W1DT13H23M34S
    P is the duration designator (for period) placed at the start of the duration representation.
    Y is the year designator that follows the value for the number of years.
    M is the month designator that follows the value for the number of months.
    W is the week designator that follows the value for the number of weeks.
    D is the day designator that follows the value for the number of days.
    T is the time designator that precedes the time components of the representation.
    H is the hour designator that follows the value for the number of hours.
    M is the minute designator that follows the value for the number of minutes.
    S is the second designator that follows the value for the number of seconds.

    Note the time designator, T, that precedes the time value.

    Matches moment.js, Luxon and DateFns implementations
    ,/. is valid for decimal places and +/- is a valid prefix
  
"""
scalar Duration

interface IBaseCkptEvent {
  """Event type"""
  eventType: CkptEventType!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Mutation {
  createCheckpoint(input: CkptInput!): Checkpoint!
  createCkptStep(input: CkptStepInput!): CkptStep!
  createResumeCkpt(input: ResumeCkptInput!): ResumeCkpt!
  createRoadmap(ckptList: [CkptInput!]!, ckptStepList: [CkptStepInput!]!, resumeCkptList: [ResumeCkptInput!]!, trainConfigList: [TrainConfigInput!]!): Roadmap!
  createTrainConfig(input: TrainConfigInput!): TrainConfig!
}

"""When a new post is created"""
type NewPostEvent implements IBaseCkptEvent {
  """Event type"""
  eventType: CkptEventType!
  result: Checkpoint!
}

"""Integers that will have a value of 0 or more."""
scalar NonNegativeInt

"""Integers that will have a value greater than 0."""
scalar PositiveInt

type Query {
  """All the Checkpoints"""
  allCheckpoints: [Checkpoint!]
  """Query the step by id"""
  allCkptSteps: [CkptStep!]
  """
  Query the relationships all the configs and the checkpoints they resumed from
  """
  allResumeCkpts(id: String): [ResumeCkpt!]
  """TrainConfig"""
  allTrainConfigs: [TrainConfig!]
  """Saved Checkpoint"""
  checkpoint(id: String): Checkpoint
  """Query the step by id"""
  ckptStep(id: String): CkptStep
  """Query the step by id"""
  resumeCkpt(id: String): ResumeCkpt
  """Saved Checkpoint"""
  roadmap: Roadmap
  """TrainConfig"""
  trainConfig(id: String): TrainConfig
}

"""Continue training config from checkpoints"""
type ResumeCkpt {
  from: String!
  id: String!
  isSameTask: Boolean!
  key: String!
  revision: String!
  to: String!
}

input ResumeCkptInput {
  from: String!
  isSameTask: Boolean!
  to: String!
}

"""InternLM Roadmap"""
type Roadmap {
  ckptList: [Checkpoint!]!
  ckptStepList: [CkptStep!]!
  resumeCkptList: [ResumeCkpt!]!
  trainConfigList: [TrainConfig!]!
}

type Subscription {
  """Events related to posts"""
  postEvents: IBaseCkptEvent!
}

"""Training Config"""
type TrainConfig {
  """TrainConfig's Checkpoints"""
  ckpts: [Checkpoint!]!
  dataConfig: JSON!
  id: String!
  key: String!
  modelConfig: JSON!
  modelName: String!
  optimizerConfig: JSON!
  parallelConfig: JSON!
  revision: String!
}

input TrainConfigInput {
  dataConfig: JSON!
  modelConfig: JSON!
  modelName: String!
  optimizerConfig: JSON!
  parallelConfig: JSON!
}